#%RAML 1.0
title: DATA - LilzFleur
version: v1
baseUri: http://127.0.0.1:5000/

types:
  Message:
    properties:
      message:
        type: string
        required: true

  Error:
    properties:
      message:
        type: string
        required: true

  formulaire_profil_utilisateur:
    type: object
    properties:
      nom_user:
        type: string
        maxLength: 50
      prenom_user:
        type: string
        maxLength: 50
      adresse_courriel:
        type: string
        maxLength: 100
      etablissements:
        type: array
        items: string
        maxLength: 255
      mot_de_passe:
        type: string
    required: [nom_user, prenom_user, adresse_courriel, etablissements, mot_de_passe]
    additionalProperties: false

  formulaire_demande_inspection:
    type: object
    properties:
      etablissement:
        type: string
        maxLength: 100
      adresse:
        type: string
        maxLength: 100
      ville:
        type: string
        maxLength: 50
      date_visite:
        type: string
        pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
      nom_user:
        type: string
        maxLength: 50
      prenom_user:
        type: string
        maxLength: 50
      description_problem:
        type: string
        maxLength: 255
    required: [etablissement, adresse, ville, date_visite, nom_user, prenom_user, description_problem]
    additionalProperties: false

  formulaire_supprimer_inspection:
    type: object
    properties:
      etablissement:
        type: string
        maxLength: 100
      ville:
        type: string
        maxLength: 50
      nom_user:
        type: string
        maxLength: 50
      prenom_user:
        type: string
        maxLength: 50
    required: [etablissement, ville, nom_user, prenom_user]
    additionalProperties: false

/api:
  /contrevenants:
    description: "Service REST permettant d'obtenir la liste des contrevenants ayant commis une infraction entre deux dates"
    get:
      description: "Obtenir la liste des contrevenants ayant commis une infraction entre deux dates"
      queryParameters:
        du:
          description: "Date de début dans le format ISO 8601 (AAAA-MM-JJ)"
          type: string
          required: true
        au:
          description: "Date de fin dans le format ISO 8601 (AAAA-MM-JJ)"
          type: string
          required: true
      responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "nom": "Dupont",
                    "prenom": "Jean",
                    "date_infraction": "2022-01-01",
                    "montant_amende": 50
                  },
                  {
                    "nom": "Martin",
                    "prenom": "Pierre",
                    "date_infraction": "2022-02-15",
                    "montant_amende": 75
                  }
                ]
        400:
          body:
            application/json:
              examples: {
                         "error": "Paramètre 'du' manquant."
                         }
  /get-etablissements-by-infractions-json:
      description: Sert à recevoir la liste de tous les établissements ainsi que leur nombre d'infractions en ordre décroissant en json
      get:
        description: Retourne la liste des établissements avec le nombre d'infractions associées en ordre décroissant
        responses:
          200:
            description: Successful response
            body:
              application/json:
                example: |
                  [
                    {"etablissement": "Restaurant A", "nb_infractions": 10},
                    {"etablissement": "Bar B", "nb_infractions": 8},
                    {"etablissement": "Café C", "nb_infractions": 5}
                  ]
          500:
            description: Error response
            body:
              application/json:
                example: {
                          "error": "Erreur lors de la connexion à la base de données",
                          "details": "Error message details."
                          }
  /get-etablissements-by-infractions-xml:
      description: Sert à recevoir la liste de tous les établissements ainsi que leur nombre d'infractions en ordre décroissant en xml
      get:
        description: Retourne la liste des établissements avec le nombre d'infractions associées en ordre décroissant
        responses:
          200:
            description: Successful response
            body:
              application/xml:
                example: |
                  <contrevenants>
                      <etablissement>
                        <nom_etablissement> restaurant 1 </nom_etablissement>
                        <nb_infractions> 33 </nb_infractions>
                      </etablissement>
                  </contrevenants>
          500:
            description: Error response
            body:
              application/json:
                example: {
                          "error": "Erreur lors de la connexion à la base de données",
                          "details": "Error message details."
                          }
  /get-etablissements-by-infractions-csv:
      description: Sert à recevoir la liste de tous les établissements ainsi que leur nombre d'infractions en ordre décroissant en csv
      get:
        description: Retourne la liste des établissements avec le nombre d'infractions associées en ordre décroissant
        responses:
          200:
            body:
              application/xml:
                example: |
                    etablissement,nb_infractions
                    RESTAURANT 1,33
                    RESTAURANT 2,30
                    RESTAURANT 3,26
          500:
              body:
                application/json:
                  example: {
                            "error": "Erreur lors de la connexion à la base de données",
                            "details": "Error message details."
                            }
  /post-user:
    description: "Sert à créer un nouvel utilisateur dans la BD"
    post:
        description: "Créer un nouvel utilisateur"
        body:
          application/json:
            type: formulaire_profil_utilisateur
        responses:
          201:
            body:
              application/json:
                example: {"message": "Profil utilisateur créé avec succès"}
          400:
            body:
              application/json:
                example: {"error": "svp remplir tous les champs demandés"}
  /post-inspection:
      description: Sert à offrir un service permettant de faire une demande d'inspection à la ville.
      post:
        description: Créer une demande d'inspection
        body:
          application/json:
            type: formulaire_demande_inspection
        responses:
          201:
            body:
              application/json:
                example: {"message": "Demande d'inspection effectuée avec succès"}
          400:
            body:
              application/json:
                example: {"error": "svp remplir tous les champs demandés"}
          422:
            body:
              application/json:
                example: {"status": "Validation échouée", "errors": "error message"}
  /delete-inspection:
      description: Sert à supprimer une demande d'inspection
      delete:
        description: Supprime une demande d'inspection
        body:
          application/json:
            type: formulaire_supprimer_inspection
        responses:
          200:
            body:
              application/json:
                example: {"message": "Demande d'inspection supprimé avec succès"}
          400:
            body:
              application/json:
                example: {"error": "nom_user dépasse 50 caractères"}
          422:
            body:
              application/json:
                example: {"status": "Validation échouée", "errors": "error message"}
          500:
            body:
              application/json:
                example: {"error": "Suppression de la demande échouée"}